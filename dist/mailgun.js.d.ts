// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../form-data

declare module 'mailgun.js' {
    import Client from 'mailgun.js/client';
    import { InputFormData } from 'mailgun.js/interfaces/IFormData';
    import Options from 'mailgun.js/interfaces/Options';
    class Mailgun {
        constructor(FormData: InputFormData);
        client(options: Options): Client;
    }
    export = Mailgun;
}

declare module 'mailgun.js/client' {
    import Options from 'mailgun.js/interfaces/Options';
    import DomainClient from 'mailgun.js/domains';
    import EventClient from 'mailgun.js/events';
    import StatsClient from 'mailgun.js/stats';
    import SuppressionClient from 'mailgun.js/suppressions';
    import WebhookClient from 'mailgun.js/webhooks';
    import MessagesClient from 'mailgun.js/messages';
    import RoutesClient from 'mailgun.js/routes';
    import ValidateClient from 'mailgun.js/validate';
    import IpsClient from 'mailgun.js/ips';
    import IpPoolsClient from 'mailgun.js/ip-pools';
    import ListsClient from 'mailgun.js/lists';
    import { InputFormData } from 'mailgun.js/interfaces/IFormData';
    export default class Client {
        domains: DomainClient;
        webhooks: WebhookClient;
        events: EventClient;
        stats: StatsClient;
        suppressions: SuppressionClient;
        messages: MessagesClient;
        routes: RoutesClient;
        validate: ValidateClient;
        ips: IpsClient;
        ip_pools: IpPoolsClient;
        lists: ListsClient;
        constructor(options: Options, formData: InputFormData);
    }
}

declare module 'mailgun.js/interfaces/IFormData' {
    import NodeFormData from 'form-data';
    export interface IFormDataOptions {
        [key: string]: any;
    }
    export interface InputFormData {
        new (options?: HTMLFormElement | IFormDataOptions): NodeFormData | FormData;
    }
}

declare module 'mailgun.js/interfaces/Options' {
    interface Options {
        username: string;
        key: string;
        url?: string;
        public_key?: string;
        timeout?: number;
    }
    export default Options;
}

declare module 'mailgun.js/domains' {
    import { DomainsQuery, DomainInfo, DomainShortData, DNSRecord, ConnectionSettings, UpdatedConnectionSettings, DKIMAuthorityInfo, UpdatedDKIMAuthority, DKIMSelectorInfo, UpdatedDKIMSelectorResponse, WebPrefixInfo, UpdatedWebPrefixResponse, ReplacementForPool, MessageResponse } from 'mailgun.js/interfaces/Domains';
    import APIResponse from 'mailgun.js/interfaces/ApiResponse';
    import Request from 'mailgun.js/request';
    import { DomainTrackingData, OpenTrackingInfo, ClickTrackingInfo, UnsubscribeTrackingInfo, UpdatedOpenTracking } from 'mailgun.js/interfaces/DomainTracking';
    import { IDomainCredentials } from 'mailgun.js/interfaces/DomainCredentials';
    import { IDomainTemplatesClient } from 'mailgun.js/interfaces/DomainTemplates';
    import DomainCredentialsClient from 'mailgun.js/domainsCredentials';
    import DomainTemplatesClient from 'mailgun.js/domainsTemplates';
    import { IDomainTagsClient } from 'mailgun.js/interfaces/DomainTags';
    import DomainTagsClient from 'mailgun.js/domainsTags';
    export class Domain {
        name: string;
        require_tls: boolean;
        skip_verification: boolean;
        state: string;
        wildcard: boolean;
        spam_action: string;
        created_at: string;
        smtp_password: string;
        smtp_login: string;
        type: string;
        receiving_dns_records: DNSRecord[] | null;
        sending_dns_records: DNSRecord[] | null;
        constructor(data: DomainShortData, receiving?: DNSRecord[] | null, sending?: DNSRecord[] | null);
    }
    export default class DomainClient {
        request: Request;
        domainCredentials: IDomainCredentials;
        domainTemplates: IDomainTemplatesClient;
        domainTags: IDomainTagsClient;
        constructor(request: Request, domainCredentialsClient: DomainCredentialsClient, domainTemplatesClient: DomainTemplatesClient, domainTagsClient: DomainTagsClient);
        list(query?: DomainsQuery): Promise<Domain[]>;
        get(domain: string): Promise<Domain>;
        create(data: DomainInfo): Promise<Domain>;
        destroy(domain: string): Promise<MessageResponse>;
        getConnection(domain: string): Promise<ConnectionSettings>;
        updateConnection(domain: string, data: ConnectionSettings): Promise<UpdatedConnectionSettings>;
        getTracking(domain: string): Promise<DomainTrackingData>;
        updateTracking(domain: string, type: string, data: OpenTrackingInfo | ClickTrackingInfo | UnsubscribeTrackingInfo): Promise<UpdatedOpenTracking>;
        getIps(domain: string): Promise<string[]>;
        assignIp(domain: string, ip: string): Promise<APIResponse>;
        deleteIp(domain: string, ip: string): Promise<APIResponse>;
        linkIpPool(domain: string, pool_id: string): Promise<APIResponse>;
        unlinkIpPoll(domain: string, replacement: ReplacementForPool): Promise<APIResponse>;
        updateDKIMAuthority(domain: string, data: DKIMAuthorityInfo): Promise<UpdatedDKIMAuthority>;
        updateDKIMSelector(domain: string, data: DKIMSelectorInfo): Promise<UpdatedDKIMSelectorResponse>;
        updateWebPrefix(domain: string, data: WebPrefixInfo): Promise<UpdatedWebPrefixResponse>;
    }
}

declare module 'mailgun.js/events' {
    import { EventsList, EventsPage, EventsResponse, ParsedPagesList } from 'mailgun.js/interfaces/Events';
    import Request from 'mailgun.js/request';
    export default class EventClient {
        request: Request;
        constructor(request: Request);
        _parsePageNumber(url: string): string;
        _parsePage(id: string, url: string): EventsPage;
        _parsePageLinks(response: EventsResponse): ParsedPagesList;
        _parseEventList(response: EventsResponse): EventsList;
        get(domain: string, query?: {
            page: string;
        }): Promise<EventsList>;
    }
}

declare module 'mailgun.js/stats' {
    import Request from 'mailgun.js/request';
    import { StatsQuery, StatsOptions, Stat } from 'mailgun.js/interfaces/StatsOptions';
    class Stats {
        start: Date;
        end: Date;
        resolution: string;
        stats: Stat[];
        constructor(data: StatsOptions);
    }
    export default class StatsClient {
        request: Request;
        constructor(request: Request);
        _parseStats(response: {
            body: StatsOptions;
        }): Stats;
        getDomain(domain: string, query?: StatsQuery): Promise<Stats>;
        getAccount(query?: StatsQuery): Promise<Stats>;
    }
    export {};
}

declare module 'mailgun.js/suppressions' {
    import Request from 'mailgun.js/request';
    import { BounceData, ComplaintData, UnsubscribeData, WhiteListData } from 'mailgun.js/interfaces/Supressions';
    class Bounce {
        type: string;
        address: string;
        code: number;
        error: string;
        created_at: Date;
        constructor(data: BounceData);
    }
    class Complaint {
        type: string;
        address: any;
        created_at: Date;
        constructor(data: ComplaintData);
    }
    class Unsubscribe {
        type: string;
        address: string;
        tags: any;
        created_at: Date;
        constructor(data: UnsubscribeData);
    }
    class WhiteList {
        type: string;
        value: string;
        reason: string;
        createdAt: Date;
        constructor(data: WhiteListData);
    }
    type TModel = typeof Bounce | typeof Complaint | typeof Unsubscribe | typeof WhiteList;
    export default class SuppressionClient {
        request: any;
        models: {
            bounces: typeof Bounce;
            complaints: typeof Complaint;
            unsubscribes: typeof Unsubscribe;
            whitelists: typeof WhiteList;
        };
        constructor(request: Request);
        _parsePage(id: string, pageUrl: string): {
            id: string;
            page: string | string[];
            address: string | string[];
            url: string;
        };
        _parsePageLinks(response: {
            body: {
                paging: any;
            };
        }): any;
        _parseList(response: {
            body: {
                items: any;
                paging: any;
            };
        }, Model: TModel): any;
        _parseItem(response: {
            body: any;
        }, Model: TModel): Bounce | Complaint | Unsubscribe | WhiteList;
        list(domain: string, type: string, query: any): any;
        get(domain: string, type: string, address: string): any;
        create(domain: string, type: string, data: any): any;
        destroy(domain: string, type: string, address: string): any;
    }
    export {};
}

declare module 'mailgun.js/webhooks' {
    import { ValidationResponse, WebhookList, WebhookResponse, WebhooksQuery } from 'mailgun.js/interfaces/Webhooks';
    import Request from 'mailgun.js/request';
    class Webhook {
        id: string;
        url: string;
        constructor(id: string, url: string);
    }
    export default class WebhookClient {
        request: Request;
        constructor(request: Request);
        _parseWebhookList(response: {
            body: {
                webhooks: WebhookList;
            };
        }): WebhookList;
        _parseWebhookWithID(id: string): (response: WebhookResponse) => Webhook;
        _parseWebhookTest(response: {
            body: {
                code: number;
                message: string;
            };
        }): {
            code: number;
            message: string;
        };
        list(domain: string, query: WebhooksQuery): Promise<WebhookList>;
        get(domain: string, id: string): Promise<Webhook>;
        create(domain: string, id: string, url: string, test?: boolean): Promise<Webhook | ValidationResponse>;
        update(domain: string, id: string, url: string): Promise<Webhook>;
        destroy(domain: string, id: string): Promise<Webhook>;
    }
    export {};
}

declare module 'mailgun.js/messages' {
    import Request from 'mailgun.js/request';
    export default class MessagesClient {
        request: Request;
        constructor(request: Request);
        _parseResponse(response: {
            body: any;
        }): any;
        create(domain: string, data: any): Promise<any>;
    }
}

declare module 'mailgun.js/routes' {
    import { CreateUpdateRouteData, DestroyRouteResponse, Route, RoutesListQuery, UpdateRouteResponse } from 'mailgun.js/interfaces/routes';
    import Request from 'mailgun.js/request';
    export default class RoutesClient {
        request: Request;
        constructor(request: Request);
        list(query: RoutesListQuery): Promise<Route[]>;
        get(id: string): Promise<Route>;
        create(data: CreateUpdateRouteData): Promise<Route>;
        update(id: string, data: CreateUpdateRouteData): Promise<UpdateRouteResponse>;
        destroy(id: string): Promise<DestroyRouteResponse>;
    }
}

declare module 'mailgun.js/validate' {
    import { IMultipleValidationClient } from 'mailgun.js/interfaces/MultipleValidation';
    import { ValidationResult } from 'mailgun.js/interfaces/Validate';
    import Request from 'mailgun.js/request';
    export default class ValidateClient {
        multipleValidation: IMultipleValidationClient;
        request: Request;
        constructor(request: Request, multipleValidationClient: IMultipleValidationClient);
        get(address: string): Promise<ValidationResult>;
    }
}

declare module 'mailgun.js/ips' {
    import MgRequest from 'mailgun.js/request';
    import { IpData, IpsListResponseBody } from 'mailgun.js/interfaces/Ips';
    export default class IpsClient {
        request: MgRequest;
        constructor(request: MgRequest);
        list(query: any): Promise<IpsListResponseBody | IpData>;
        get(ip: string): Promise<IpsListResponseBody | IpData>;
    }
}

declare module 'mailgun.js/ip-pools' {
    import Request from 'mailgun.js/request';
    import { IpPool, IpPoolUpdateData } from 'mailgun.js/interfaces/IpPools';
    export default class IpPoolsClient {
        request: Request;
        constructor(request: Request);
        list(query: any): Promise<IpPool[]>;
        create(data: {
            name: string;
            description?: string;
            ips?: string[];
        }): Promise<{
            message: string;
            pool_id: string;
        }>;
        update(poolId: string, data: IpPoolUpdateData): Promise<any>;
        delete(poolId: string, data: {
            id: string;
            pool_id: string;
        }): Promise<any>;
    }
}

declare module 'mailgun.js/lists' {
    import Request from 'mailgun.js/request';
    import { ListsQuery, CreateUpdateList, DestroyedList, MailingList } from 'mailgun.js/interfaces/lists';
    import { IMailListsMembers } from 'mailgun.js/interfaces/mailListMembers';
    export default class ListsClient {
        baseRoute: string;
        request: Request;
        members: IMailListsMembers;
        constructor(request: Request, members: IMailListsMembers);
        list(query?: ListsQuery): Promise<MailingList[]>;
        get(mailListAddress: string): Promise<MailingList>;
        create(data: CreateUpdateList): Promise<MailingList>;
        update(mailListAddress: string, data: CreateUpdateList): Promise<MailingList>;
        destroy(mailListAddress: string): Promise<DestroyedList>;
    }
}

declare module 'mailgun.js/interfaces/Domains' {
    export interface DomainsQuery {
        authority: string;
        state: 'active' | 'unverified' | 'disabled';
        limit: number;
        skip: number;
    }
    export interface DomainInfo {
        name: string;
        smtp_password: string;
        spam_action?: 'disabled' | 'block' | 'tag';
        wildcard?: boolean;
        force_dkim_authority?: boolean | 'true' | 'false';
        dkim_key_size?: 1024 | 2048;
        ips?: '';
        pool_id?: '';
        web_scheme: 'http' | 'https';
    }
    export interface DomainShortData {
        name: string;
        require_tls: boolean;
        skip_verification: boolean;
        state: string;
        wildcard: boolean;
        spam_action: string;
        created_at: string;
        smtp_password: string;
        smtp_login: string;
        type: string;
    }
    export interface DomainData extends DomainShortData {
        id: string;
        is_disabled: boolean;
        web_prefix: string;
        web_scheme: string;
    }
    export interface DomainsListItem extends DomainShortData {
        receiving_dns_records: null;
        sending_dns_records: null;
    }
    export interface DNSRecord {
        cached: any[];
        name: string;
        record_type: string;
        valid: string;
        value: string;
    }
    export interface DomainResponseData {
        status: number;
        body: {
            domain: DomainData;
            message?: string;
            receiving_dns_records: DNSRecord[];
            sending_dns_records: DNSRecord[];
        };
    }
    export interface DomainListResponseData {
        status: number;
        body: {
            items: DomainsListItem[];
            total_count: number;
        };
    }
    export interface MessageResponse {
        message: string;
    }
    export interface DestroyedDomainResponse {
        status: number;
        body: MessageResponse;
    }
    export interface ConnectionSettings {
        require_tls: boolean;
        skip_verification: boolean;
    }
    export interface ConnectionSettingsResponse {
        body: {
            connection: ConnectionSettings;
        };
        status: number;
    }
    export interface UpdatedConnectionSettings {
        message: string;
        require_tls: boolean;
        skip_verification: boolean;
    }
    export interface UpdatedConnectionSettingsRes {
        body: UpdatedConnectionSettings;
        status: number;
    }
    export interface DKIMAuthorityInfo {
        self: boolean | 'yes' | 'no' | 'true' | 'false';
    }
    export interface UpdatedDKIMAuthority {
        changed: boolean;
        message: string;
        sending_dns_records: DNSRecord[];
    }
    export interface UpdatedDKIMAuthorityResponse {
        body: UpdatedDKIMAuthority;
        status: 200;
    }
    export interface DKIMSelectorInfo {
        dkimSelector: string;
    }
    export interface UpdatedDKIMSelectorResponse {
        body: MessageResponse;
        status: number;
    }
    export interface WebPrefixInfo {
        webPrefix: string;
    }
    export interface UpdatedWebPrefix {
        message: string;
    }
    export interface UpdatedWebPrefixResponse {
        body: MessageResponse;
        status: number;
    }
    export interface ReplacementForPool {
        pool_id?: string;
        ip?: string;
    }
}

declare module 'mailgun.js/interfaces/ApiResponse' {
    interface APIResponse {
        status: number;
        body: any;
    }
    export default APIResponse;
}

declare module 'mailgun.js/request' {
    import NodeFormData from 'form-data';
    import RequestOptions from 'mailgun.js/interfaces/RequestOptions';
    import { InputFormData } from 'mailgun.js/interfaces/IFormData';
    import APIResponse from 'mailgun.js/interfaces/ApiResponse';
    class Request {
        constructor(options: RequestOptions, formData: InputFormData);
        request(method: string, url: string, inputOptions?: any): Promise<APIResponse>;
        query(method: string, url: string, query: any, options?: any): Promise<APIResponse>;
        command(method: string, url: string, data: any, options?: any): Promise<APIResponse>;
        get(url: string, query?: any, options?: any): Promise<APIResponse>;
        head(url: string, query: any, options: any): Promise<APIResponse>;
        options(url: string, query: any, options: any): Promise<APIResponse>;
        post(url: string, data: any, options?: any): Promise<APIResponse>;
        postWithFD(url: string, data: any): Promise<APIResponse>;
        putWithFD(url: string, data: any): Promise<APIResponse>;
        patchWithFD(url: string, data: any): Promise<APIResponse>;
        createFormData(data: any): NodeFormData | FormData;
        put(url: string, data: any, options?: any): Promise<APIResponse>;
        patch(url: string, data: any, options?: any): Promise<APIResponse>;
        delete(url: string, data?: any, options?: any): Promise<APIResponse>;
    }
    export default Request;
}

declare module 'mailgun.js/interfaces/DomainTracking' {
    export interface DomainTrackingData {
        click: {
            active: boolean;
        };
        open: {
            active: boolean;
        };
        unsubscribe: {
            active: boolean;
            html_footer: string;
            text_footer: string;
        };
    }
    export interface DomainTrackingResponse {
        status: number;
        body: {
            tracking: DomainTrackingData;
        };
    }
    export interface UpdatedOpenTracking {
        message: string;
        open?: {
            active: boolean;
        };
        click?: {
            active: boolean | 'htmlonly';
        };
        unsubscribe?: {
            active: boolean;
            html_footer: string;
            text_footer: string;
        };
    }
    export interface UpdateDomainTrackingResponse {
        status: number;
        body: UpdatedOpenTracking;
    }
    export interface OpenTrackingInfo {
        active: 'yes' | 'no' | 'true' | 'false';
    }
    export interface ClickTrackingInfo {
        active: 'yes' | 'no' | 'true' | 'false' | 'htmlonly';
    }
    export interface UnsubscribeTrackingInfo {
        active: 'yes' | 'no' | 'true' | 'false';
        html_footer: string;
        text_footer: string;
    }
}

declare module 'mailgun.js/interfaces/DomainCredentials' {
    export interface DomainCredentialsQuery {
        limit: number;
        skip: number;
    }
    export interface DomainCredentials {
        login: string;
        password: string;
    }
    export interface DomainCredentialsItem {
        created_at: string;
        login: string;
        mailbox: string;
        size_bytes: number | null;
    }
    export interface DomainCredentialsResponseData {
        status: number;
        body: {
            items: DomainCredentialsItem[];
            total_count: number;
        };
    }
    export interface DomainCredentialsList {
        items: DomainCredentialsItem[];
        totalCount: number;
    }
    export interface DomainCredentialsResult {
        status: number;
        message: string;
        spec?: string;
    }
    export interface CreatedUpdatedDomainCredentialsResponse {
        status: number;
        body: {
            message: string;
        };
    }
    export interface DeletedDomainCredentialsResponse {
        status: number;
        body: {
            message: string;
            spec: string;
        };
    }
    export interface UpdateDomainCredentialsData {
        password: string;
    }
    export interface IDomainCredentials {
        list(domain: string, query: DomainCredentialsQuery): Promise<DomainCredentialsList>;
        create(domain: string, data: DomainCredentials): Promise<DomainCredentialsResult>;
        update(domain: string, credentialsLogin: string, data: UpdateDomainCredentialsData): Promise<DomainCredentialsResult>;
        destroy(domain: string, credentialsLogin: string): Promise<DomainCredentialsResult>;
    }
}

declare module 'mailgun.js/interfaces/DomainTemplates' {
    import { DomainTemplateItem } from 'mailgun.js/domainsTemplates';
    export enum YesNo {
        YES = "yes",
        NO = "no"
    }
    export enum Pages {
        FIRST = "first",
        LAST = "last",
        NEXT = "next",
        PREV = "prev"
    }
    export interface DomainTemplateData {
        name: string;
        description: string;
        template: string;
        tag?: string;
        engine?: string;
        comment?: string;
    }
    export interface DomainTemplateVersionData {
        template: string;
        tag: string;
        engine?: string;
        comment?: string;
        active?: YesNo;
    }
    export interface DomainTemplateUpdateData {
        description: string;
    }
    export interface DomainTemplateUpdateVersionData {
        template?: string;
        comment?: string;
        active?: YesNo;
    }
    export interface DomainTemplatesQuery {
        page: Pages;
        limit: number;
        p: string;
    }
    export interface TemplateQuery {
        active: YesNo;
    }
    export interface ShortTemplateVersion {
        tag: string;
        engine: string;
        mjml: string;
        createdAt: string | Date;
        comment: string;
        active: boolean;
        id: string;
    }
    export interface TemplateVersion extends ShortTemplateVersion {
        template: string;
    }
    export interface DomainTemplate {
        name: string;
        description: string;
        createdAt: string | Date;
        createdBy: string;
        id: string;
        version?: TemplateVersion;
        versions?: ShortTemplateVersion[];
    }
    export interface CreateDomainTemplateAPIResponse {
        status: number;
        body: {
            message: string;
            template: DomainTemplate;
        };
    }
    export interface ListDomainTemplatesAPIResponse {
        status: number;
        body: {
            items: DomainTemplate[];
            paging: {
                first: string;
                last: string;
                next: string;
                previous: string;
            };
        };
    }
    export interface ListDomainTemplatesResult {
        items: DomainTemplate[];
        pages: {
            first: string;
            last: string;
            next: string;
            previous: string;
        };
    }
    export interface GetDomainTemplateAPIResponse {
        status: number;
        body: {
            template: DomainTemplate;
        };
    }
    export interface UpdateOrDeleteDomainTemplateAPIResponse {
        status: number;
        body: {
            message: string;
            template: {
                name: string;
            };
        };
    }
    export interface UpdateOrDeleteDomainTemplateResult {
        status: number;
        message: string;
        templateName?: string;
    }
    export interface NotificationAPIResponse {
        status: number;
        body: {
            message: string;
        };
    }
    export interface NotificationResult {
        status: number;
        message: string;
    }
    export interface CreateDomainTemplateVersionAPIResponse {
        status: number;
        body: {
            message: string;
            template: DomainTemplate;
        };
    }
    export interface CreateDomainTemplateVersionResult {
        status: number;
        message: string;
        template: DomainTemplate;
    }
    export interface MutateDomainTemplateVersionAPIResponse {
        status: number;
        body: {
            message: string;
            template: {
                name: string;
                version: {
                    tag: string;
                };
            };
        };
    }
    export interface MutateDomainTemplateVersionResult {
        status: number;
        message: string;
        templateName: string;
        templateVersion: {
            tag: string;
        };
    }
    export interface ListDomainTemplateVersionsAPIResponse {
        status: number;
        body: {
            template: {
                name: string;
                description: string;
                createdAt: string;
                createdBy: string;
                id: string;
                versions: ShortTemplateVersion[];
            };
            paging: {
                first: string;
                last: string;
                next: string;
                previous: string;
            };
        };
    }
    export interface ListDomainTemplateVersionsResult {
        template: DomainTemplateItem;
        pages: {
            first: string;
            last: string;
            next: string;
            previous: string;
        };
    }
    export interface IDomainTemplatesClient {
        list(domain: string, query?: DomainTemplatesQuery): Promise<ListDomainTemplatesResult>;
        get(domain: string, templateName: string, query: TemplateQuery): Promise<DomainTemplateItem>;
        create(domain: string, data: DomainTemplateData): Promise<DomainTemplateItem>;
        update(domain: string, templateName: string, data: DomainTemplateUpdateData): Promise<UpdateOrDeleteDomainTemplateResult>;
        destroy(domain: string, templateName: string): Promise<UpdateOrDeleteDomainTemplateResult>;
        destroyAll(domain: string): Promise<NotificationResult>;
        createVersion(domain: string, templateName: string, data: DomainTemplateVersionData): Promise<CreateDomainTemplateVersionResult>;
        getVersion(domain: string, templateName: string, tag: string): Promise<DomainTemplateItem>;
        updateVersion(domain: string, templateName: string, tag: string, data: DomainTemplateUpdateVersionData): Promise<MutateDomainTemplateVersionResult>;
        destroyVersion(domain: string, templateName: string, tag: string): Promise<MutateDomainTemplateVersionResult>;
        listVersions(domain: string, templateName: string, query?: DomainTemplatesQuery): Promise<ListDomainTemplateVersionsResult>;
    }
}

declare module 'mailgun.js/domainsCredentials' {
    import Request from 'mailgun.js/request';
    import { DomainCredentials, DomainCredentialsList, DomainCredentialsQuery, DomainCredentialsResult, IDomainCredentials, UpdateDomainCredentialsData } from 'mailgun.js/interfaces/DomainCredentials';
    export default class DomainCredentialsClient implements IDomainCredentials {
        baseRoute: string;
        request: Request;
        constructor(request: Request);
        list(domain: string, query?: DomainCredentialsQuery): Promise<DomainCredentialsList>;
        create(domain: string, data: DomainCredentials): Promise<DomainCredentialsResult>;
        update(domain: string, credentialsLogin: string, data: UpdateDomainCredentialsData): Promise<DomainCredentialsResult>;
        destroy(domain: string, credentialsLogin: string): Promise<DomainCredentialsResult>;
    }
}

declare module 'mailgun.js/domainsTemplates' {
    import Request from 'mailgun.js/request';
    import { CreateDomainTemplateVersionResult, DomainTemplate, DomainTemplateData, DomainTemplatesQuery, DomainTemplateUpdateData, DomainTemplateUpdateVersionData, DomainTemplateVersionData, IDomainTemplatesClient, ListDomainTemplatesResult, ListDomainTemplateVersionsResult, MutateDomainTemplateVersionResult, NotificationResult, ShortTemplateVersion, TemplateQuery, TemplateVersion, UpdateOrDeleteDomainTemplateResult } from 'mailgun.js/interfaces/DomainTemplates';
    export class DomainTemplateItem implements DomainTemplate {
        name: string;
        description: string;
        createdAt: Date | '';
        createdBy: string;
        id: string;
        version?: TemplateVersion;
        versions?: ShortTemplateVersion[];
        constructor(domainTemplateFromAPI: DomainTemplate);
    }
    export default class DomainTemplatesClient implements IDomainTemplatesClient {
        baseRoute: string;
        request: Request;
        constructor(request: Request);
        list(domain: string, query?: DomainTemplatesQuery): Promise<ListDomainTemplatesResult>;
        get(domain: string, templateName: string, query?: TemplateQuery): Promise<DomainTemplateItem>;
        create(domain: string, data: DomainTemplateData): Promise<DomainTemplateItem>;
        update(domain: string, templateName: string, data: DomainTemplateUpdateData): Promise<UpdateOrDeleteDomainTemplateResult>;
        destroy(domain: string, templateName: string): Promise<UpdateOrDeleteDomainTemplateResult>;
        destroyAll(domain: string): Promise<NotificationResult>;
        createVersion(domain: string, templateName: string, data: DomainTemplateVersionData): Promise<CreateDomainTemplateVersionResult>;
        getVersion(domain: string, templateName: string, tag: string): Promise<DomainTemplateItem>;
        updateVersion(domain: string, templateName: string, tag: string, data: DomainTemplateUpdateVersionData): Promise<MutateDomainTemplateVersionResult>;
        destroyVersion(domain: string, templateName: string, tag: string): Promise<MutateDomainTemplateVersionResult>;
        listVersions(domain: string, templateName: string, query?: DomainTemplatesQuery): Promise<ListDomainTemplateVersionsResult>;
    }
}

declare module 'mailgun.js/interfaces/DomainTags' {
    import { DomainTagStatistic } from 'mailgun.js/domainsTags';
    export enum Resolution {
        HOUR = "hour",
        DAY = "day",
        MONTH = "month"
    }
    export interface DomainTagsQuery {
        limit: number;
    }
    export interface DomainTagsStatisticQuery {
        event: string;
        start?: number;
        end?: number;
        resolution?: Resolution;
        duration?: string;
    }
    export interface DomainTagsItemInfo {
        tag: string;
        description: string;
        'first-seen': string;
        'last-seen': string;
    }
    export interface DomainTagsItem {
        tag: string;
        description: string;
        'first-seen': Date;
        'last-seen': Date;
    }
    export interface PagesList {
        previous: string;
        first: string;
        last: string;
        next: string;
    }
    export interface ParsedPage {
        id: string;
        url: string;
    }
    export interface ParsedPagesList {
        previous: ParsedPage;
        first: ParsedPage;
        last: ParsedPage;
        next: ParsedPage;
    }
    export interface TagsPage {
        id: string;
        url: string;
    }
    export interface PagesListAccumulator {
        [index: string]: TagsPage;
    }
    export interface DomainTagsResponseData {
        status: number;
        body: {
            items: DomainTagsItemInfo[];
            paging: PagesList;
        };
    }
    export interface DomainTagsList {
        items: DomainTagsItem[];
        pages: ParsedPagesList;
    }
    export interface DomainTagsMessageRes {
        message: string;
        status?: number;
    }
    export interface DomainTagAPIResponseStatsItem {
        time: string;
        accepted?: {
            incoming: number;
            outgoing: number;
            total: number;
        };
        delivered?: {
            smtp: number;
            http: number;
            optimized: number;
            total: number;
        };
        opened?: {
            total: number;
        };
        failed?: {
            temporary: {
                espblock: number;
                total: number;
            };
            permanent: {
                'suppress-bounce': number;
                'suppress-unsubscribe': number;
                'suppress-complaint': number;
                bounce: number;
                'delayed-bounce': number;
                webhook: number;
                optimized: number;
                total: number;
            };
        };
        clicked?: {
            total: number;
        };
        unsubscribed?: {
            total: number;
        };
        complained?: {
            total: number;
        };
        stored?: {
            total: number;
        };
    }
    export interface DomainTagStatAPIResponse {
        body: {
            tag: string;
            description: string;
            start: string;
            end: string;
            resolution: Resolution;
            stats: DomainTagAPIResponseStatsItem[];
        };
    }
    export interface DomainTagStatisticItem extends Omit<DomainTagAPIResponseStatsItem, 'time'> {
        time: Date;
    }
    export interface DomainTagStatisticResult {
        tag: string;
        description: string;
        start: Date;
        end: Date;
        resolution: Resolution;
        stats: DomainTagStatisticItem[];
    }
    export interface DomainTagCountriesAPIResponse {
        body: {
            tag: string;
            country: {
                [key: string]: {
                    clicked: number;
                    complained: number;
                    opened: number;
                    unique_clicked: number;
                    unique_opened: number;
                    unsubscribed: number;
                };
            };
        };
    }
    export interface DomainTagCountriesAggregation {
        tag: string;
        country: {
            [key: string]: {
                clicked: number;
                complained: number;
                opened: number;
                unique_clicked: number;
                unique_opened: number;
                unsubscribed: number;
            };
        };
    }
    export interface DomainTagProvidersAPIResponse {
        body: {
            tag: string;
            provider: {
                [key: string]: {
                    accepted: number;
                    clicked: number;
                    complained: number;
                    delivered: number;
                    opened: number;
                    unique_clicked: number;
                    unique_opened: number;
                    unsubscribed: number;
                };
            };
        };
        status: number;
    }
    export interface DomainTagProvidersAggregation {
        tag: string;
        provider: {
            [key: string]: {
                accepted: number;
                clicked: number;
                complained: number;
                delivered: number;
                opened: number;
                unique_clicked: number;
                unique_opened: number;
                unsubscribed: number;
            };
        };
    }
    export interface DeviceStatistic {
        clicked: number;
        complained: number;
        opened: number;
        unique_clicked: number;
        unique_opened: number;
        unsubscribed: number;
    }
    export interface DevicesTypes {
        desktop: DeviceStatistic;
        mobile: DeviceStatistic;
        tablet: DeviceStatistic;
        unknown: DeviceStatistic;
    }
    export interface DomainTagDevicesAPIResponse {
        body: {
            tag: string;
            device: DevicesTypes;
        };
        status: number;
    }
    export interface DomainTagDevicesAggregation {
        tag: string;
        device: DevicesTypes;
    }
    export interface IDomainTagsClient {
        list(domain: string): Promise<DomainTagsList>;
        get(domain: string, tag: string): Promise<DomainTagsItem>;
        update(domain: string, tag: string, description: string): Promise<DomainTagsMessageRes>;
        destroy(domain: string, tag: string): Promise<DomainTagsMessageRes>;
        statistic(domain: string, tag: string, query: DomainTagsStatisticQuery): Promise<DomainTagStatistic>;
        countries(domain: string, tag: string): Promise<DomainTagCountriesAggregation>;
        providers(domain: string, tag: string): Promise<DomainTagProvidersAggregation>;
        devices(domain: string, tag: string): Promise<DomainTagDevicesAggregation>;
    }
}

declare module 'mailgun.js/domainsTags' {
    import Request from 'mailgun.js/request';
    import { DomainTagCountriesAggregation, DomainTagDevicesAggregation, DomainTagProvidersAggregation, DomainTagsItem, DomainTagsItemInfo, DomainTagsList, DomainTagsMessageRes, DomainTagsQuery, DomainTagsStatisticQuery, DomainTagStatAPIResponse, DomainTagStatisticItem, DomainTagStatisticResult, IDomainTagsClient, Resolution } from 'mailgun.js/interfaces/DomainTags';
    export class DomainTag implements DomainTagsItem {
        tag: string;
        description: string;
        'first-seen': Date;
        'last-seen': Date;
        constructor(tagInfo: DomainTagsItemInfo);
    }
    export class DomainTagStatistic implements DomainTagStatisticResult {
        tag: string;
        description: string;
        start: Date;
        end: Date;
        resolution: Resolution;
        stats: DomainTagStatisticItem[];
        constructor(tagStatisticInfo: DomainTagStatAPIResponse);
    }
    export default class DomainTagsClient implements IDomainTagsClient {
        baseRoute: string;
        request: Request;
        constructor(request: Request);
        list(domain: string, query?: DomainTagsQuery): Promise<DomainTagsList>;
        get(domain: string, tag: string): Promise<DomainTagsItem>;
        update(domain: string, tag: string, description: string): Promise<DomainTagsMessageRes>;
        destroy(domain: string, tag: string): Promise<DomainTagsMessageRes>;
        statistic(domain: string, tag: string, query: DomainTagsStatisticQuery): Promise<DomainTagStatistic>;
        countries(domain: string, tag: string): Promise<DomainTagCountriesAggregation>;
        providers(domain: string, tag: string): Promise<DomainTagProvidersAggregation>;
        devices(domain: string, tag: string): Promise<DomainTagDevicesAggregation>;
    }
}

declare module 'mailgun.js/interfaces/Events' {
    export interface EventsPage {
        id: string;
        number: string;
        url: string;
    }
    export interface PagesList {
        previous: string;
        first: string;
        last: string;
        next: string;
    }
    export interface EventsResponse {
        body: {
            items: [];
            paging: PagesList;
        };
    }
    export interface DomainEvent {
        severity: string;
        tags: string[];
        storage: {
            url: string;
            key: string;
        };
        'delivery-status': {
            tls: boolean;
            'mx-host': string;
            code: number;
            description: string;
            'session-seconds': number;
            utf8: boolean;
            'attempt-no': number;
            message: string;
            'certificate-verified': boolean;
        };
        'recipient-domain': string;
        id: string;
        campaigns: [];
        reason: string;
        'user-variables': {
            [key: string]: any;
        };
        flags: {
            'is-routed': boolean;
            'is-authenticated': boolean;
            'is-system-test': boolean;
            'is-test-mode': boolean;
        };
        'log-level': string;
        template?: any;
        timestamp: number;
        envelope: {
            transport: string;
            sender: string;
            'sending-ip': string;
            targets: string;
        };
        message: {
            headers: {
                to: string;
                'message-id': string;
                from: string;
                subject: string;
            };
            attachments: [];
            size: 308;
        };
        recipient: string;
        event: string;
    }
    export interface ParsedPage {
        id: string;
        number: string;
        url: string;
    }
    export interface ParsedPagesList {
        previous: ParsedPage;
        first: ParsedPage;
        last: ParsedPage;
        next: ParsedPage;
    }
    export interface EventsList {
        items: DomainEvent[];
        pages: ParsedPagesList;
    }
    export interface PagesListAccumulator {
        [index: string]: EventsPage;
    }
}

declare module 'mailgun.js/interfaces/StatsOptions' {
    export interface Stat {
        time: string | Date;
        delivered: {
            smtp: number;
            http: number;
            total: number;
        };
    }
    export interface StatsOptions {
        start: string | Date;
        end: string | Date;
        resolution: string;
        stats: Stat[];
    }
    export interface StatsQuery {
        event: string | string[];
        start: string | Date;
        end: string | Date;
        resolution: 'hour' | 'day' | 'month';
        duration: string;
    }
}

declare module 'mailgun.js/interfaces/Supressions' {
    export interface BounceData {
        address: string;
        code: number;
        error: string;
        created_at: string | Date;
    }
    export interface ComplaintData {
        address: string;
        created_at: string | Date;
    }
    export interface UnsubscribeData {
        address: string;
        tags: any;
        created_at: string | Date;
    }
    export interface WhiteListData {
        type: string;
        value: string;
        reason: string;
        createdAt: string | Date;
    }
}

declare module 'mailgun.js/interfaces/Webhooks' {
    export interface APIWebhook {
        url?: string;
        urls?: string[];
    }
    export interface WebhookResponseBody {
        message: string;
        webhook: APIWebhook;
    }
    export interface WebhookResponse {
        status: number;
        body: WebhookResponseBody;
    }
    export interface WebhookList {
        [id: string]: {
            urls: string[];
        };
    }
    export interface WebhooksQuery {
        limit?: number;
        skip?: number;
    }
    export interface ValidationResponse {
        code: number;
        message: string;
    }
}

declare module 'mailgun.js/interfaces/routes' {
    export interface Route {
        actions: string[];
        created_at: string;
        description: string;
        expression: string;
        id: string;
        priority: number;
    }
    export interface UpdateRouteResponse extends Route {
        message: string;
    }
    export interface DestroyRouteResponse {
        id: string;
        message: string;
    }
    export interface CreateUpdateRouteData {
        priority?: number;
        description?: string;
        expression: string;
        action: string[];
    }
    export interface RoutesListQuery {
        limit?: number;
        skip?: number;
    }
}

declare module 'mailgun.js/interfaces/MultipleValidation' {
    export interface MultipleValidationJob {
        created_at: number;
        download_url: {
            csv: string;
            json: string;
        };
        id: string;
        quantity: number;
        records_processed: number;
        status: string;
        summary: {
            result: {
                catch_all: number;
                deliverable: number;
                do_not_send: number;
                undeliverable: number;
                unknown: number;
            };
            risk: {
                high: number;
                low: number;
                medium: number;
                unknown: number;
            };
        };
    }
    export interface CreatedMultipleValidationJob {
        id: string;
        message: string;
    }
    export interface PagesList {
        prev: string;
        first: string;
        last: string;
        next: string;
    }
    export interface MultipleValidationJobsListResult {
        jobs: MultipleValidationJob[];
        paging: PagesList;
        total: number;
    }
    export interface MultipleValidationJobsListResponse {
        status: 200;
        body: MultipleValidationJobsListResult;
    }
    export interface CanceledMultipleValidationJob {
        body: string;
        status: number;
    }
    export interface IMultipleValidationClient {
        list(): Promise<MultipleValidationJobsListResult>;
        get(listId: string): Promise<MultipleValidationJob>;
        create(listId: string, file: any): Promise<CreatedMultipleValidationJob>;
        destroy(listId: string): Promise<CanceledMultipleValidationJob>;
    }
}

declare module 'mailgun.js/interfaces/Validate' {
    export interface ValidationResult {
        address: string;
        is_disposable_address: boolean;
        is_role_address: boolean;
        reason: string[];
        result: string;
        risk: string;
    }
    export interface ValidationResponse {
        status: number;
        body: ValidationResult;
    }
}

declare module 'mailgun.js/interfaces/Ips' {
    export interface IpsListResponseBody {
        assignable_to_pools: boolean;
        items: string[];
        total_count: number;
    }
    export interface IpData {
        ip: string;
        dedicated: boolean;
        rdns: string;
    }
}

declare module 'mailgun.js/interfaces/IpPools' {
    export interface IpPool {
        description: string;
        ips: string[];
        is_linked: boolean;
        name: string;
        pool_id: string;
    }
    export interface IpPoolListResponse {
        body: {
            ip_pools: IpPool;
            message: string;
        };
    }
    export interface IpPoolUpdateData {
        name: string;
        description: string;
        add_ip: string;
        remove_ip: string;
    }
}

declare module 'mailgun.js/interfaces/lists' {
    export interface ListsQuery {
        address?: string;
        limit?: number;
        skip?: number;
    }
    export interface CreateUpdateList {
        address: string;
        name?: string;
        description?: string;
        access_level?: 'readonly' | 'members' | 'everyone';
        reply_preference?: 'list' | 'sender';
    }
    export interface DestroyedList {
        address: string;
        message: string;
    }
    export interface MailingList {
        access_level: string;
        address: string;
        created_at: string;
        description: string;
        members_count: number;
        name: string;
        reply_preference: null | string;
    }
}

declare module 'mailgun.js/interfaces/mailListMembers' {
    import { MailingList } from 'mailgun.js/interfaces/lists';
    export interface MailListMember {
        address: string;
        name: string;
        subscribed: boolean;
        vars: string | any;
    }
    export interface MailListMembersQuery {
        subscribed?: 'yes' | 'no';
        limit?: number;
    }
    export interface MultipleMembersData {
        members: Array<MailListMember>;
        upsert: 'yes' | 'no';
    }
    export interface MultipleMembersReqData {
        members: string;
        upsert: 'yes' | 'no';
    }
    export interface CreateUpdateMailListMembers {
        address: string;
        name?: string;
        vars?: string;
        subscribed?: 'yes' | 'no' | boolean;
        upsert?: 'yes' | 'no';
    }
    export interface CreateUpdateMailListMembersReq {
        address: string;
        name?: string;
        vars?: string;
        subscribed?: 'yes' | 'no' | boolean;
        upsert?: 'yes' | 'no';
    }
    export interface DeletedMember {
        member: {
            address: string;
        };
        message: string;
    }
    export interface NewMultipleMembersResponse {
        list: MailingList;
        message: string;
        'task-id': string;
    }
    export interface IMailListsMembers {
        listMembers(mailListAddress: string, query?: MailListMembersQuery): Promise<MailListMember[]>;
        getMember(address: string, memberAddress: string): Promise<MailListMember>;
        createMember(mailListAddress: string, data: CreateUpdateMailListMembers): Promise<MailListMember>;
        createMembers(mailListAddress: string, data: MultipleMembersData): Promise<NewMultipleMembersResponse>;
        updateMember(address: string, memberAddress: string, data: CreateUpdateMailListMembers): Promise<MailListMember>;
        destroyMember(address: string, memberAddress: string): Promise<DeletedMember>;
    }
}

declare module 'mailgun.js/interfaces/RequestOptions' {
    import Options from 'mailgun.js/interfaces/Options';
    interface RequestOptions extends Options {
        headers: any;
        timeout: number;
    }
    export default RequestOptions;
}

